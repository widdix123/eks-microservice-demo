---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: flagger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/stats/prometheus'
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: "public.ecr.aws/u2g6w7p2/eks-microservice-demo/frontend:${APP_VERSION}"
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /ping
              port: 9000
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ping
              port: 9000
            successThreshold: 3
          env:
            - name: BASE_URL
              value: "http://detail.flagger:3000/catalogDetail"
          ports:
            - containerPort: 9000
---
apiVersion: v1
kind: Service
metadata:
  #annotations:
  # This annotation is only required if you are creating an internal facing ELB. Remove this annotation to create public facing ELB.
  #service.beta.kubernetes.io/aws-load-balancer-internal: "true"
  name: frontend
  namespace: flagger
  labels:
    app: frontend
spec:
  ports:
    - name: "http"
      port: 9000
      targetPort: 9000
  selector:
    app: frontend
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualNode
metadata:
  name: frontend
  namespace: flagger
spec:
  podSelector:
    matchLabels:
      app: frontend
  listeners:
    - portMapping:
        port: 9000
        protocol: http
  backends:
    - virtualService:
        virtualServiceRef:
          name: detail
  serviceDiscovery:
    dns:
      hostname: frontend.flagger.svc.cluster.local
  logging:
    accessLog:
      file:
        path: /dev/stdout
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualService
metadata:
  name: frontend
  namespace: flagger
spec:
  awsName: frontend.flagger.svc.cluster.local
  provider:
    virtualNode:
      virtualNodeRef:
        name: frontend
---